// Функция reducer получает действия и изменяет состояние хранилища.
//
// Состояние хранилища будет представлять тип Immutable.Map,
// который представляет собой словарь, хранящий пары ключ-значение.
// В качестве ключей здесь используются названия свойств объекта.

const Map = require("immutable").Map;
 
// В функции reducer при определении параметра присваиваем состоянию
// начальное значение - пустой словарь
// Первый параметр - это собственно состояние хранилища.
// Второйпараметр - action - передает действие.
// Так как наши действия имеют свойство type, то мы можем получить это
// свойство и в зависимости от его значения тем или иным образом обновить
// cостояние. Для обновления состояния применяются методы класса Immutable.Map.
// Каждый такой метод возвращает новый объект Immutable.Map.

// state создаем в App.js
const reducer = function(state = Map(), action) {
  
  // после каждого обновления состояния нам надо возвратить обновленное состояние.
    // Таким образом произойдет обновление хранилища.
  switch (action.type) {
	
	// действие с типом "SET_STATE", которое просто возвращает начальное состояние хранилища:
    case "SET_STATE":
        return state.merge(action.state);
	
    // Здесь предполагается, что в состоянии будет храниться массив phones, который
      // будет содержать строки - название моделей телефонов. При добавлении фактически
      // создается новый массив, в который добавляются все элементы из старого массива
      // phones и новый - добавляемый элемент
    case "ADD_PHONE":
        return state.update("phones", (phones) => [...phones, action.phone]);
    
	// А для удаления мы просто возвращаем все те элементы, которые не равны удаляемому объекту.
      //Для этого применяется функция phones.filter, которая выполняет фильтрацию
	case "DELETE_PHONE":
        return state.update("phones",
            (phones) => phones.filter(
                (item) => item !== action.phone
            )
        );
  }
  return state;
} // reducer
module.exports = reducer;