Flux представляет архитектуру приложений, которые используют React. 
Flux больше представляет паттерн, чем конкретный фреймворк.

Приложения, использующие Flux, имеют три основные части: 
    диспетчер (dispatcher), 
	хранилище данных (store) 
	представления (view) - стандартные компоненты React.

Диспетчер представляет во всей этой схеме центральное звено, которое управляет
          потоком данных в приложении Flux. Диспетчер регистрирует хранилища и 
		  их коллбеки - обратные вызовы. Когда диспетчер получает извне 
		  некоторое действие, то через коллбеки хранилищ диспетчер уведомляет 
		  эти хранилища о поступившем действии.

Хранилища содержат состояние приложения и его логику. По своему действию они 
          могут напоминать модель из паттерна MVC, в то же время они не представляют 
		  один объект, а управляют группой объектов. 
		  Каждое отдельное хранилище управляет определенной областью или доменом
		  приложения.
          Каждое хранилище регистрируется в диспетчере вместе со своими обратными
		  вызовами. Когда диспетчер получает действие, то он выполняет обратный 
		  вызов, передавая ему поступившее действие в качестве параметра. 
		  В зависимости от типа действия вызывается тот или иной метод внутри 
		  хранилища, в котором происходит обновление состояния хранилища. 
		  После обновления хранилища генерируется событие, которое указывает, 
		  что хранилище было обновлено. И через это событие представления 
		  (то есть компоненты React) узнают, что хранилище было обновлено, и сами 
		  обновляют свое состояние.

Представления оформляют визуальную часть приложения. Особый вид представлений - 
          controller-view представляет компонент самого верхнего уровня, который 
		  содержит все остальные компоненты. Controller-view прослушивает события, 
		  которые исходят от хранилища. Получив событие, controller-view передает 
		  данные, полученные от хранилища, другим компонентам.

Когда controller-view получает событие от хранилища, то вначале controller-view 
запрашивает у хранилища все необходимые данные. Затем он вызывает свой метод 
setState() или forceUpdate(), который приводит к выполнению у компонента метода render(). 
А это в свою очередь приводит к вызову метода render() и обновлению дочерних компонентов.

Нередко состояние хранилища передается по иерархии компонентов в виде единого объекта, 
а компоненты извлекают из него только те данные, которые им непосредственно нужны.

Действие представляет функцию, которая может содержать некоторые данные, передающиеся 
диспетчеру. Действие может быть вызвано обработчиками событий в компонентах, например, 
по нажатию на кнопку, либо инициатором действий может какой-нибудь другой внешний 
источник, например, сервер. Через диспетчер хранилище получает действие и соответствующим 
образом реагирует на него.

Весь механизм взаимодействия можно представить в виде однонаправленного потока от действия 
(action) к представлению (view) - см. слайд 001_flux_flow.png

Когда пользователь взаимодействует с представлением, то представления через диспетчер 
вызывают различные действия (например, добавление или обновление данных) по отношению к хранилищу, 
обратно от хранилища к представлению идут ответные действия, которые обновляют представление - см.
слайд 002_user_action_flow

